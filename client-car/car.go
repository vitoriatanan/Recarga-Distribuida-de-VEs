package main

import (
	"fmt"
	"log"
	"math/rand"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

const (
	brokerURL = "tcp://mosquitto:1883" // URL do broker MQTT
)

var clientID int // ID √∫nico do cliente (carro), gerado aleatoriamente

/**
 * Conecta ao broker MQTT utilizando o endere√ßo e o ID fornecidos.
 *
 * @param broker  o endere√ßo do broker MQTT
 * @param clientID o ID do cliente
 * @return mqtt.Client o cliente MQTT conectado
 */
func connectMQTT(broker, clientID string) mqtt.Client {
	opts := mqtt.NewClientOptions().
		AddBroker(broker).
		SetClientID(clientID).
		SetDefaultPublishHandler(defaultMessageHandler)

	client := mqtt.NewClient(opts)

	if token := client.Connect(); token.Wait() && token.Error() != nil {
		log.Fatalf("‚ùå Erro ao conectar ao broker: %v", token.Error())
	}

	fmt.Println("‚úÖ Conectado ao broker MQTT!")
	return client
}

/**
 * Desconecta o cliente MQTT do broker.
 *
 * @param client o cliente MQTT a ser desconectado
 */
func disconnectMQTT(client mqtt.Client) {
	client.Disconnect(250)
	fmt.Println("üö™ Cliente desconectado.")
}

/**
 * Publica uma mensagem em um t√≥pico MQTT com QoS 0.
 *
 * @param client  o cliente MQTT
 * @param topic   o t√≥pico para onde publicar
 * @param payload o conte√∫do da mensagem
 */
func publish(client mqtt.Client, topic string, payload string) {
	token := client.Publish(topic, 0, false, payload)
	token.Wait()
	if err := token.Error(); err != nil {
		log.Printf("‚ö†Ô∏è Erro ao publicar no t√≥pico %s: %v", topic, err)
		return
	}
	fmt.Printf("üìÑ Publicado no t√≥pico %s\n", topic)
}

/**
 * Inscreve o cliente em um t√≥pico MQTT, associando um handler de mensagens.
 *
 * @param client   o cliente MQTT
 * @param topic    o t√≥pico a se inscrever
 * @param callback o handler para mensagens recebidas
 */
func subscribe(client mqtt.Client, topic string, callback mqtt.MessageHandler) {
	token := client.Subscribe(topic, 0, callback)
	token.Wait()
	if err := token.Error(); err != nil {
		log.Fatalf("‚ùå Erro ao se inscrever no t√≥pico %s: %v", topic, err)
	}
	fmt.Printf("üì° Inscrito no t√≥pico %s\n", topic)
}

/**
 * Handler padr√£o para mensagens recebidas via MQTT.
 *
 * @param client o cliente MQTT
 * @param msg    a mensagem recebida
 */
func defaultMessageHandler(client mqtt.Client, msg mqtt.Message) {
	fmt.Printf("üì© Mensagem recebida [%s]: %s\n", msg.Topic(), msg.Payload())
}

/**
 * Handler espec√≠fico para mensagens de confirma√ß√£o de reserva.
 *
 * @param client o cliente MQTT
 * @param msg    a mensagem de confirma√ß√£o
 */
func reservationHandler(client mqtt.Client, msg mqtt.Message) {
	fmt.Printf("‚úÖ Confirma√ß√£o de reserva recebida para o carro %d: %s\n", clientID, string(msg.Payload()))
}

/**
 * Gera uma posi√ß√£o aleat√≥ria com coordenadas de origem e destino.
 *
 * @return quatro inteiros representando originX, originY, destinationX, destinationY
 */
func generatePosition() (int, int, int, int) {
	originX := rand.Intn(1000)
	originY := rand.Intn(1000)
	destinationX := rand.Intn(1000)
	destinationY := rand.Intn(1000)

	return originX, originY, destinationX, destinationY
}

/**
 * Inicia o loop de simula√ß√£o do carro.
 * Publica coordenadas aleat√≥rias de posi√ß√£o e destino nos t√≥picos apropriados a cada 2 segundos.
 *
 * @param client o cliente MQTT
 */
func startCarLoop(client mqtt.Client) {
	for {
		origX, origY, destX, destY := generatePosition()
		route := fmt.Sprintf("%d, %d, %d, %d, %d", clientID, origX, origY, destX, destY)

		publish(client, "car/position", route)
		fmt.Println("üì§ Enviado para car/position:", route)

		publish(client, "car/recarga", route)
		fmt.Println("üì§ Enviado para car/recarga:", route)

		time.Sleep(2 * time.Second)
	}
}

/**
 * Fun√ß√£o principal da aplica√ß√£o.
 * Gera um ID aleat√≥rio para o carro, conecta ao broker MQTT, se inscreve nos t√≥picos necess√°rios
 * e inicia a simula√ß√£o de movimenta√ß√£o do carro.
 */
func main() {
	rand.Seed(time.Now().UnixNano())

	clientID = rand.Intn(1000)
	id := fmt.Sprintf("%d", clientID)

	client := connectMQTT(brokerURL, id)
	defer disconnectMQTT(client)

	subscribe(client, "car/recarga", defaultMessageHandler)
	reservationTopic := fmt.Sprintf("car/%d/reservation", clientID)
	subscribe(client, reservationTopic, reservationHandler)

	startCarLoop(client)
}
